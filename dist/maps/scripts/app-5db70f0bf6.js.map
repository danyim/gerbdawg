{"version":3,"sources":["scripts/app-5db70f0bf6.js"],"names":["angular","module","acmeMalarkey","malarkey","linkFunc","scope","el","attr","vm","watcher","typist","typeSpeed","deleteSpeed","pauseDelay","loop","postfix","addClass","forEach","values","value","type","$on","MalarkeyController","$log","githubContributor","activate","$inject","directive","restrict","template","link","controller","controllerAs","$http","getContributors","limit","getContributorsComplete","response","data","getContributorsFailed","error","toJson","get","apiHost","then","service","factory","MainController","$scope","$firebaseArray","$sanitize","$modal","hotkeys","$stateParams","firebase","Firebase","child","$loaded","sayings","registerHotkeys","modalIsOpen","openModal","addSaying","gerbMessage","dawgMessage","$add","modalInstance","open","animation","templateUrl","size","result","selectedItem","add","combo","description","callback","this","randomSaying","AddSayingModalController","$firebaseObject","$window","toastr","$modalInstance","$cookies","$rootScope","$interval","rememberPass","randomizePasswordSaying","isAuthenticated","obj","p","editPassword","cookie","password","authenticate","now","Date","put","expires","getFullYear","getMonth","getDate","success","remove","newSaying","closeModal","dismiss","logout","currentIdx","passwordSayingIndex","newIdx","Math","floor","random","passwordSayings","length","removeSaying","saying","confirm","$remove","runBlock","run","routerConfig","$stateProvider","$urlRouterProvider","state","url","params","otherwise","config","constant","moment","$logProvider","toastrConfig","debugEnabled","allowHtml","timeOut","positionClass","preventDuplicates","progressBar","$templateCache"],"mappings":"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","file":"scripts/app-5db70f0bf6.js","sourcesContent":["// (function() {\n//   'use strict';\n\n//   angular\n//       .module('gerbsDawg')\n//       .service('webDevTec', webDevTec);\n\n//   /** @ngInject */\n//   function webDevTec() {\n//     var data = [\n//       {\n//         'title': 'AngularJS',\n//         'url': 'https://angularjs.org/',\n//         'description': 'HTML enhanced for web apps!',\n//         'logo': 'angular.png'\n//       },\n//       {\n//         'title': 'BrowserSync',\n//         'url': 'http://browsersync.io/',\n//         'description': 'Time-saving synchronised browser testing.',\n//         'logo': 'browsersync.png'\n//       },\n//       {\n//         'title': 'GulpJS',\n//         'url': 'http://gulpjs.com/',\n//         'description': 'The streaming build system.',\n//         'logo': 'gulp.png'\n//       },\n//       {\n//         'title': 'Jasmine',\n//         'url': 'http://jasmine.github.io/',\n//         'description': 'Behavior-Driven JavaScript.',\n//         'logo': 'jasmine.png'\n//       },\n//       {\n//         'title': 'Karma',\n//         'url': 'http://karma-runner.github.io/',\n//         'description': 'Spectacular Test Runner for JavaScript.',\n//         'logo': 'karma.png'\n//       },\n//       {\n//         'title': 'Protractor',\n//         'url': 'https://github.com/angular/protractor',\n//         'description': 'End to end test framework for AngularJS applications built on top of WebDriverJS.',\n//         'logo': 'protractor.png'\n//       },\n//       {\n//         'title': 'Bootstrap',\n//         'url': 'http://getbootstrap.com/',\n//         'description': 'Bootstrap is the most popular HTML, CSS, and JS framework for developing responsive, mobile first projects on the web.',\n//         'logo': 'bootstrap.png'\n//       },\n//       {\n//         'title': 'Angular UI Bootstrap',\n//         'url': 'http://angular-ui.github.io/bootstrap/',\n//         'description': 'Bootstrap components written in pure AngularJS by the AngularUI Team.',\n//         'logo': 'ui-bootstrap.png'\n//       },\n//       {\n//         'title': 'Sass (Node)',\n//         'url': 'https://github.com/sass/node-sass',\n//         'description': 'Node.js binding to libsass, the C version of the popular stylesheet preprocessor, Sass.',\n//         'logo': 'node-sass.png'\n//       }\n//     ];\n\n//     this.getTec = getTec;\n\n//     function getTec() {\n//       return data;\n//     }\n//   }\n\n// })();\n\n(function() {\n  'use strict';\n\n  angular\n    .module('gerbsDawg', ['ngAnimate', 'ngCookies', 'ngTouch', 'ngSanitize', 'ngMessages', 'ngAria', 'ui.router', 'ui.bootstrap', 'toastr', 'firebase', 'cfp.hotkeys']);\n\n})();\n\n(function() {\n  'use strict';\n\n  angular\n    .module('gerbsDawg')\n    .directive('acmeMalarkey', acmeMalarkey);\n\n  /** @ngInject */\n  function acmeMalarkey(malarkey) {\n    var directive = {\n      restrict: 'E',\n      scope: {\n        values: '='\n      },\n      template: '&nbsp;',\n      link: linkFunc,\n      controller: MalarkeyController,\n      controllerAs: 'vm'\n    };\n\n    return directive;\n\n    function linkFunc(scope, el, attr, vm) {\n      var watcher;\n      var typist = malarkey(el[0], {\n        typeSpeed: 80,\n        deleteSpeed: 40,\n        pauseDelay: 800,\n        loop: false,\n        postfix: ' '\n      });\n\n      el.addClass('acme-malarkey');\n\n      angular.forEach(scope.values, function(value) {\n        typist.type(value);\n      });\n\n      // watcher = scope.$watch('vm.contributors', function() {\n      //   angular.forEach(vm.contributors, function(contributor) {\n      //     typist.type(contributor.login).pause().delete();\n      //   });\n      // });\n\n      scope.$on('$destroy', function () {\n        watcher();\n      });\n    }\n\n    /** @ngInject */\n    function MalarkeyController($log, githubContributor) {\n      var vm = this;\n\n      activate();\n\n      function activate() {\n\n      }\n    }\n\n  }\n\n})();\n\n(function() {\n  'use strict';\n\n  angular\n    .module('gerbsDawg')\n    .factory('githubContributor', githubContributor);\n\n  /** @ngInject */\n  function githubContributor($log, $http) {\n    var apiHost = 'https://api.github.com/repos/Swiip/generator-gulp-angular';\n\n    var service = {\n      apiHost: apiHost,\n      getContributors: getContributors\n    };\n\n    return service;\n\n    function getContributors(limit) {\n      if (!limit) {\n        limit = 30;\n      }\n\n      return $http.get(apiHost + '/contributors?per_page=' + limit)\n        .then(getContributorsComplete)\n        .catch(getContributorsFailed);\n\n      function getContributorsComplete(response) {\n        return response.data;\n      }\n\n      function getContributorsFailed(error) {\n        $log.error('XHR Failed for getContributors.\\n' + angular.toJson(error.data, true));\n      }\n    }\n  }\n})();\n\n(function() {\n  'use strict';\n\n  angular\n    .module('gerbsDawg')\n    .controller('MainController', MainController);\n\n  /** @ngInject */\n  function MainController($scope, $firebaseArray, $log, $sanitize, $modal, hotkeys, $stateParams) {\n    var vm = this;\n    var firebase = null;\n    vm.sayings = [];\n    vm.addSaying = addSaying;\n    vm.randomSaying = '';\n    vm.registerHotkeys = registerHotkeys;\n    vm.openModal = openModal;\n    vm.modalIsOpen = null;\n\n    activate();\n\n    function activate() {\n      firebase = new Firebase('https://gerbsdawg.firebaseio.com/');\n\n      var data = $firebaseArray(firebase.child('sayings'))\n      data.$loaded().then(function() {\n        vm.sayings = data;\n      });\n\n      vm.registerHotkeys();\n      vm.modalIsOpen = false\n      if($stateParams.openModal) vm.openModal();\n      // seedData();\n    }\n\n    function addSaying(gerbMessage, dawgMessage) {\n      vm.sayings.$add({\n        gerbMessage: gerbMessage,\n        dawgMessage: dawgMessage\n      });\n    }\n\n    function openModal() {\n      if(!vm.modalIsOpen) {\n        var modalInstance = $modal.open({\n          animation: true,\n          templateUrl: 'app/addSayingModal/addSayingModal.html',\n          controller: 'AddSayingModalController',\n          controllerAs: 'vm',\n          size: 'lg'\n        });\n\n        vm.modalIsOpen = true;\n\n        modalInstance.result.then(function (selectedItem) {\n\n        }, function () {\n          vm.modalIsOpen = false;\n        });\n      }\n    }\n\n    function registerHotkeys() {\n      hotkeys.add({\n        combo: 'a',\n        description: 'Add things',\n        callback: function() {\n          vm.openModal();\n        }\n      });\n    }\n\n    // function seedData() {\n    //   vm.addSaying('Ask questions', 'Answers questions you haven\\'t even thought to ask');\n    // }\n  }\n})();\n\n(function() {\n  'use strict';\n\n  angular\n    .module('gerbsDawg')\n    .controller('AddSayingModalController', AddSayingModalController);\n\n  /** @ngInject */\n  function AddSayingModalController($firebaseArray, $firebaseObject, $window, toastr, $modalInstance, $cookies, $rootScope, $interval) {\n    var vm = this;\n    var firebase = null;\n    var p;\n\n    vm.sayings = [];\n    vm.authenticate = authenticate;\n    vm.addSaying = addSaying;\n    vm.closeModal = closeModal;\n    vm.isAuthenticated = $rootScope.isAuthenticated;\n    vm.logout = logout;\n    vm.newSaying = {};\n    vm.password = '';\n    vm.passwordSayings = [\n      'Sorry, you gotta be The Big Dawg to edit this stuff',\n      'Show me if you\\'re yet another gerb or The Big Dawg',\n      'You can\\'t just talk like The Big Dawg, you have to walk like The Big Dawg',\n      'Gerbs are always nosy about things that aren\\'t their business',\n      'What do think The Big Dawg would type down there?',\n      'Is that you again, gerb?',\n      'This area is reserved for non-gerb, Big Dawgs only',\n      'Only a gerb can\\'t get past this',\n      'Don\\'t gerb this up',\n      'The Big Dawg knows this like the back of his paw'\n    ];\n    vm.passwordSayingIndex = 0;\n    vm.randomizePasswordSaying = randomizePasswordSaying;\n    vm.rememberPass = null;\n    vm.removeSaying = removeSaying;\n\n    activate();\n\n    function activate() {\n      firebase = new Firebase('https://gerbsdawg.firebaseio.com/');\n      vm.sayings = $firebaseArray(firebase.child('sayings'));\n      vm.rememberPass = true;\n      // Randomize the sayings\n      randomizePasswordSaying();\n      // Wait a satisfyingly long time to change it again if the user is still looking\n      $interval(function() {\n        randomizePasswordSaying();\n      }, 10000);\n\n      // Check if user is authenticated, if not, retrieve the password from Firebase\n      if(!$rootScope.isAuthenticated) {\n        // console.log('not authed');\n        // Grab the password\n        var obj = $firebaseObject(firebase);\n        obj.$loaded().then(function() {\n          p = obj.editPassword;\n\n          // Check the cookie, if there's a value, use it to attempt to auth\n          var cookie = $cookies.get('gerbdawg');\n          if(cookie) {\n            vm.password = cookie;\n            authenticate();\n          }\n        });\n      }\n    }\n\n    function authenticate() {\n      // Check password show view and add cookie\n      if(vm.password == p) {\n        $rootScope.isAuthenticated = true;\n        vm.isAuthenticated = true;\n        // If the user wanted to remember the password..\n        if(vm.rememberPass) {\n          // Create a cookie with a 1-month expiry\n          var now = new Date();\n          $cookies.put('gerbdawg', p, {\n            expires: new Date(now.getFullYear(), now.getMonth() + 1, now.getDate())\n          });\n        }\n        toastr.success('You\\'re in, Big Dawg!');\n      }\n      else {\n        vm.password = '';\n        toastr.error('Wrong password, gerb.');\n        // If it's wrong, take out the cookie\n        $cookies.remove('gerbdawg');\n        randomizePasswordSaying();\n      }\n    }\n\n    function addSaying() {\n      vm.sayings.$add(vm.newSaying);\n      vm.newSaying = {};\n      toastr.success('New saying added!');\n    }\n\n    function closeModal() {\n      $modalInstance.dismiss();\n    }\n\n    function logout() {\n      $rootScope.isAuthenticated = false;;\n      vm.isAuthenticated = false;\n      $cookies.remove('gerbdawg');\n    }\n\n    function randomizePasswordSaying() {\n      var currentIdx = vm.passwordSayingIndex;\n      var newIdx = Math.floor(Math.random() * vm.passwordSayings.length);\n      do  {\n        newIdx = Math.floor(Math.random() * vm.passwordSayings.length);\n      }\n      while(currentIdx === newIdx);\n      vm.passwordSayingIndex = newIdx;\n    }\n\n    function removeSaying(saying) {\n      if($window.confirm('Are you sure you want to remove this, Big Dawg?')) {\n        vm.sayings.$remove(saying);\n        toastr.error('Saying removed.');\n      }\n    }\n  }\n})();\n\n(function() {\n  'use strict';\n\n  angular\n    .module('gerbsDawg')\n    .run(runBlock);\n\n  /** @ngInject */\n  function runBlock($log, $rootScope) {\n    $rootScope.isAuthenticated = false;\n    // $log.debug('runBlock end');\n  }\n\n})();\n\n(function() {\n  'use strict';\n\n  angular\n    .module('gerbsDawg')\n    .config(routerConfig);\n\n  /** @ngInject */\n  function routerConfig($stateProvider, $urlRouterProvider) {\n    $stateProvider\n      .state('home', {\n        url: '/',\n        templateUrl: 'app/main/main.html',\n        controller: 'MainController',\n        controllerAs: 'vm'\n      })\n      .state('add', {\n        url: '/add',\n        templateUrl: 'app/main/main.html',\n        controller: 'MainController',\n        controllerAs: 'vm',\n        params: {\n          openModal: true\n        }\n        // templateUrl: 'app/addSayingModal/addSayingModal.html',\n        // controller: 'AddSayingModalController',\n        // controllerAs: 'vm'\n      });\n\n    $urlRouterProvider.otherwise('/');\n  }\n\n})();\n\n/* global malarkey:false, moment:false */\n(function() {\n  'use strict';\n\n  angular\n    .module('gerbsDawg')\n    .constant('malarkey', malarkey)\n    .constant('moment', moment);\n\n})();\n\n(function() {\n  'use strict';\n\n  angular\n    .module('gerbsDawg')\n    .config(config);\n\n  /** @ngInject */\n  function config($logProvider, toastrConfig) {\n    // Enable log\n    $logProvider.debugEnabled(true);\n\n    // Set options third-party lib\n    toastrConfig.allowHtml = true;\n    toastrConfig.timeOut = 1200;\n    toastrConfig.positionClass = 'toast-top-right';\n    toastrConfig.preventDuplicates = false;\n    toastrConfig.progressBar = false;\n  }\n\n})();\n\nangular.module(\"gerbsDawg\").run([\"$templateCache\", function($templateCache) {$templateCache.put(\"app/addSayingModal/addSayingModal.html\",\"<div class=\\\"row\\\"><div class=\\\"col-lg-12\\\"><div class=\\\"panel panel-primary\\\" ng-show=\\\"vm.isAuthenticated\\\"><div class=\\\"panel-heading\\\">Add/Edit Sayings</div><div class=\\\"panel-body\\\"><p>This will sync and update automatically as you type. All hail Firebase. The Big Dawg approves. Or be a gerb and <strong><span ng-click=\\\"vm.closeModal()\\\">go back home</span> or <span ng-click=\\\"vm.logout()\\\">log out</span></strong>.</p><table class=\\\"table table-condensed\\\"><thead><th>Things gerbs would do</th><th>Things The Big Dawg does</th><th></th></thead><tbody><tr class=\\\"info\\\"><td><input class=\\\"form-control\\\" ng-model=\\\"vm.newSaying.gerbMessage\\\" ng-change=\\\"vm.sayings.$save()\\\" type=\\\"text\\\" placeholder=\\\"do things...\\\"></td><td><input class=\\\"form-control\\\" ng-model=\\\"vm.newSaying.dawgMessage\\\" ng-change=\\\"vm.sayings.$save()\\\" placeholder=\\\"does things...\\\"></td><td><button class=\\\"btn btn-default\\\" ng-click=\\\"vm.addSaying()\\\">Add</button></td></tr><tr><td></td><td></td><td></td></tr><tr ng-repeat=\\\"saying in vm.sayings\\\"><td><input class=\\\"form-control\\\" ng-model=\\\"saying.gerbMessage\\\" ng-change=\\\"vm.sayings.$save(saying)\\\" type=\\\"text\\\"></td><td><input class=\\\"form-control\\\" ng-model=\\\"saying.dawgMessage\\\" ng-change=\\\"vm.sayings.$save(saying)\\\"></td><td><button class=\\\"btn btn-default\\\" ng-click=\\\"vm.removeSaying(saying)\\\">Remove</button></td></tr></tbody></table></div></div><div class=\\\"panel panel-primary\\\" ng-show=\\\"!vm.isAuthenticated\\\"><div class=\\\"panel-heading\\\">Enter Password</div><div class=\\\"panel-body\\\"><div class=\\\"row\\\"><div class=\\\"col-md-12\\\"><h4 class=\\\"text-center\\\"><strong><span class=\\\"animate\\\" ng-click=\\\"vm.randomizePasswordSaying()\\\">{{ vm.passwordSayings[vm.passwordSayingIndex] }}</span></strong></h4><p>&nbsp;</p></div></div><div class=\\\"row\\\"><div class=\\\"col-md-6 col-md-offset-3\\\"><form class=\\\"form-horizontal\\\"><div class=\\\"form-group\\\"><label for=\\\"inputPassword\\\" class=\\\"col-sm-2 control-label\\\">Password</label><div class=\\\"col-sm-10\\\"><input type=\\\"password\\\" class=\\\"form-control\\\" id=\\\"inputPassword\\\" ng-model=\\\"vm.password\\\" placeholder=\\\"Password\\\"></div></div><div class=\\\"form-group\\\"><div class=\\\"col-sm-offset-2 col-sm-10\\\"><div class=\\\"checkbox\\\"><label><input type=\\\"checkbox\\\" ng-checked=\\\"vm.rememberPass\\\"> Remember this</label></div></div></div><div class=\\\"form-group\\\"><div class=\\\"col-sm-offset-2 col-sm-10\\\"><button type=\\\"submit\\\" class=\\\"btn btn-primary\\\" ng-click=\\\"vm.authenticate()\\\">Submit</button></div></div></form></div></div></div></div></div></div>\");\n$templateCache.put(\"app/main/main.html\",\"<div class=\\\"container-fluid fill\\\"><div class=\\\"row fill\\\"><div class=\\\"col-xs-6 col-sm-6 col-md-6 col-lg-6 fill text-center gerb\\\"><img class=\\\"img\\\" src=\\\"assets/images/gerb.png\\\"><h1>Gerbs</h1><div ng-repeat=\\\"saying in vm.sayings\\\" class=\\\"saying slide-left\\\">...<span ng-bind-html=\\\"saying.gerbMessage\\\"></span></div></div><div class=\\\"col-xs-6 col-sm-6 col-md-6 col-lg-6 fill text-center dawg\\\"><img class=\\\"img\\\" src=\\\"assets/images/dawg.png\\\"><h1>THE BIG DAWG</h1><div ng-repeat=\\\"saying in vm.sayings\\\" class=\\\"saying slide-right\\\">...<span ng-bind-html=\\\"saying.dawgMessage\\\"></span></div></div></div></div>\");}]);"],"sourceRoot":"/source/"}